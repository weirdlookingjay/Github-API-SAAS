// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id           String   @id @default(cuid())
    imageUrl     String?
    firstName    String?
    lastName     String?
    emailAddress String   @unique
    credits      Int      @default(150)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    userToProjects    UserToProject[]
    questionsAked     Question[]
    stripeTransaction StripeTransaction[]
}

model Project {
    id        String    @id @default(cuid())
    name      String
    githubUrl String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    userToProjects       UserToProject[]
    commits              Commit[]
    sourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestions       Question[]
    meetings             Meeting[]
}

model UserToProject {
    id        String   @id @default(cuid())
    userId    String
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model SourceCodeEmbedding {
    id               String                      @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model StripeTransaction {
    id      String @id @default(cuid())
    credits Int
    userId  String
    user    User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model Issue {
    id       String @id @default(cuid())
    start    String
    end      String
    gist     String
    headline String
    summary  String

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Meeting {
    id         String        @id @default(cuid())
    name       String
    meetingUrl String
    status     MeetingStatus @default(PROCESSING)
    issues     Issue[]

    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Question {
    id              String   @id @default(cuid())
    projectId       String
    project         Project  @relation(fields: [projectId], references: [id])
    userId          String
    user            User     @relation(fields: [userId], references: [id])
    question        String
    answer          String
    filesReferences Json?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Commit {
    id                 String   @id @default(cuid())
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id])
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}
